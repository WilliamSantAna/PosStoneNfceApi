using System;
using System.Threading.Tasks;
using System.Text.Json;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using PosStoneNfce.API.Portal.App.Common.Controller;
using PosStoneNfce.API.Portal.App.Modules.FiscalFlow.Models;
using FiscalFlow.Common.Services.Cryptography;
using PosStoneNfce.API.Portal.App.Modules.FiscalFlow.Models.Request;
using PosStoneNfce.API.Portal.App.Common.Utils;
using PosStoneNfce.API.Portal.App.Modules.FiscalFlow.Services;
using PosStoneNfce.API.Portal.Interfaces;
using PosStoneNfce.API.Portal.Model;
using PosStoneNfce.API.Portal.Configuration;



namespace PosStoneNfce.API.Portal.App.Modules.FiscalFlow.Controller
{
    public class TestController : MainController
    {
        /// <summary>
        /// Obtem um QRCode para teste (8kb) (FINALIZADO)
        /// </summary>
        /// <remarks>
        /// GET /api/Test/GetQrCode
        /// </remarks>
        /// <response code="200">{"error": false,"code": 200, "message": "ok","data": []}</response>
        /// <response code="403">{"error": true,"code": 403, "message": "Erro ao executar metodo %metodo%. Error: %msg_error%", "data": []}</response>
        [HttpGet]
        [ProducesResponseType(200)]
        [ProducesResponseType(403)]
        [Route("Api/[controller]/GetQrCode")]
        public IActionResult GetQrCode() {
            string qrCode = "iVBORw0KGgoAAAANSUhEUgAAASwAAAEsCAYAAAB5fY51AAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QAAAAAAAD5Q7t/AAAACXBIWXMAAABgAAAAYADwa0LPAAAURUlEQVR42u3dza7cttKFYfqDfzK04TsNgvzcQOBB4CvdAw/tPekz+NDBOUk31Sqyimux3wfQJIYkUtIupFWl4pvL5XJpAGDg/1YPAAAeRcACYIOABcAGAQuADQIWABsELAA2CFgAbBCwANggYAGwQcACYIOABcAGAQuADQIWABsELAA2CFgAbBCwANggYAGwQcACYIOABcAGAQuADQIWABsELAA2CFgAbBCwANggYAGwQcACYIOABcAGAQuADQIWABsELAA2CFgAbBCwANggYAGwIROwPn361N68eWO9Rf3222/t3bt3/3Osd+/etT/++GP1bUmfQ8bcbx0zY3tknM/8XGd4c7lcLqsH0dr/39hv376tHsaQ6KX88OFDe319/dd/f//+ffvx48fqaaXOIWPu946Z4Wicz/xcZ5D5P6xndu+Pq+qPbuUcMuZeed2c7tEOCFgAbBCwANggYC3m8o7qyPv370/999H9IseEPwLWQj9+/Gh//fXX6mFM8fPPP/8rULx//7798ssvKfudPSY2cRHx8ePHS2vt5vby8rJ6eA+Ns+fXX3+9vH379u6+lcecub19+/by+++/nx7nI/vN9Pr6evnzzz+7c/ny5cvl9fX19H7R52WH57qaRVnDy8tL+/z58+ohHo6zdymjqfaMY862onQh4sePH+2nn366++/fv39vHz58OL1f7x7t/lxX4ydhkYzAohCsHhmHStnGrWD0yL8f7Yc6BCwANghYAGwQsIpEs1b33vEolUOsKF2YPVanOTwzAlaRaKr969ev/wpOSuUQq0oXopTKLxCwOk15FU3/toRUfXScZz2SMo9ut1L0maKlC2dLMzLLITLKL57xuc5kX9aQ0f7iEkxTRy7lUco86l6KPsvsbg09WeUQGeUXz/pcZ+En4WJZQaU6FT+7W8PsfTLngDoELAA2CFgAbBCwFlMqTxhRmfbPKiWgdEEfAWshpfKEUVVp/8xSAkoXDKxOU17tnv6NdlbI6CAwswRhNO1/du6K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";
            object response = new object();

            try {
                response = new {qrcode = qrCode };
            }
            catch (Exception e) {
                AddProcessingError(e.ToString());
            }

            return CustomResponse(response);
        }
    }
}